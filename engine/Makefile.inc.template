<!--(set_escape)-->
none
<!--(end)-->
# automatically generated to use 'make' for dependency resolution of single
# steps for generating a templateSet. do not edit.
#
# generated from template description in: @!templateDatabase!@
#
# generated at: @!date!@
#
# the set name is "@!templateSetName!@
#
# NOTE: available variables are
# - $(T) will hold the actual folder of the template at runtime
# - $(T_FILES) contains the folder where we find raw-template files
# - $(O) is the output folder for the generated template-files
# - $(O_STATE) should contain files needed by the template-engine itself
# - $(INTERNAL_DB) is the real input-database after it was optionally converted
#   into yaml by the main-makefile

<!--(if exists("staticMakefileIncludes"))-->
# template set consists of @!len(staticMakefileIncludes)!@ additional static makefiles:
    <!--(for inc in staticMakefileIncludes)-->
include $(T_FILES)@!inc!@
    <!--(end)-->
<!--(end)-->

<!--(if exists("generatedMakefileIncludes"))-->
# and @!len(generatedMakefileIncludes)!@ generated makefiles
#
    <!--(for inc in generatedMakefileIncludes)-->
# one line to include it:
-include $(O_STATE)@!inc!@
# one rule to create it:
$(O_STATE)@!inc!@: $(T_FILES)@!inc!@.template $(INTERNAL_DB) | $(O_STATE)
	$(PYRATEMP)  -f $(INTERNAL_DB) $< > $@ || (rm $@ && false)
# and one rule to clean it:
clean_state::
	rm -f $(O_STATE)@!inc!@
# always recreate every makefile
.PHONY: $(O_STATE)@!inc!@
    <!--(end)-->
<!--(end)-->

<!--(if exists("xsdSchema"))-->
# validation of optional schema file
$(O_STATE)database.verified: $(DB) $(T)@!xsdSchema!@ | $(O_STATE)
	xmllint --noout --schema $(T)@!xsdSchema!@ $(DB) && touch $@
# chain also to the "validate" and clean targets
verify:: $(O_STATE)database.verified
clean_state::
	rm -f $(O_STATE)database.verified
<!--(else)-->
# no schema provided, no validation possible
$(O_STATE)database.verified: $(INTERNAL_DB) $(T)@!yamlSchema!@ | $(O_STATE)
	kwalify -lf $(T)@!yamlSchema!@ $(INTERNAL_DB) > $@.out
	@grep "$<#0: valid" $@.out >/dev/null \
	    || (cat $@.out && rm -f $@ && false) \
	    && (mv $@.out $@)
# chain also to the "validate" and clean targets
verify:: $(O_STATE)database.verified
clean_state::
	rm -f $(O_STATE)database.verified
<!--(end)-->

#
# now all the templates given in the config file
#

<!--(for t in templates)-->
# output rule for $(O)@!t["outFilename"]!@
#! needs this infamous "mkdir" hack in case a files needs to be created into a
#! subdirectory....
$(O)@!t["outFilename"]!@ @!default("t['name']","")!@: $(T_FILES)@!t["templateFilename"]!@ $(INTERNAL_DB) | $(O)
	@mkdir --parent $(dir $(O)@!t["outFilename"]!@)
	$(PYRATEMP)  -f $(INTERNAL_DB) <!--(if default("t['extraVariable']"))-->-d @!t["extraVariable"]!@ <!--(end)--> $< > $(O)@!t["outFilename"]!@ || (rm $@ && false)
# and chain to the "generate" and "clean" meta target
generate_template:: $(O)@!t["outFilename"]!@
clean_template::
	rm -f $(O)@!t["outFilename"]!@

<!--(end)-->

<!--(if exists("copies"))-->
    <!--(for c in copies)-->
$(O)@!c["outFilename"]!@ @!default("c['name']","")!@: $(T_FILES)@!c["originalFilename"]!@ $(INTERNAL_DB) | $(O)
	@mkdir --parent $(dir $(O)@!c["outFilename"]!@)
	cp $< $@
# and chain to the "generate" and "clean" meta target
generate_template:: $(O)@!c["outFilename"]!@
clean_template::
	rm -f $(O)@!c["outFilename"]!@

    <!--(end)-->
<!--(end)-->

# printing info
info::
	@echo "info: generated '$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))'"
