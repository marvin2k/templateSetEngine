<!--(set_escape)-->
none
<!--(end)-->
# automatically generated to use make for dependency resolution of
# template generation. do not edit.
#
# generated from template dscription in:
# @!templateDatabase!@
#
# generated at: @!date!@
#
# the set name is "@!templateSetName!@
#
# NOTE: available variables are
# - $(T) will hold the actual folder of the template at runtime
# - $(DB) is the database
# - $(O) is the output folder
# - $(E) is the folder where the main-makefile resides

<!--(if exists("staticMakefileIncludes"))-->
# template set consists of @!len(staticMakefileIncludes)!@ additional static makefiles:
    <!--(for inc in staticMakefileIncludes)-->
include $(T)@!inc!@
    <!--(end)-->
<!--(end)-->

<!--(if exists("generatedMakefileIncludes"))-->
# and @!len(generatedMakefileIncludes)!@ generated makefiles:
    <!--(for inc in generatedMakefileIncludes)-->
-include $(O)@!inc!@
    <!--(end)-->
<!--(end)-->

<!--(if exists("databaseSchema"))-->
# validation of optional schema file, using "kwalify". doing shell
# trickery to fix always-return-0 from kwalify
$(O)database.verified: $(DB) $(T)@!databaseSchema!@ | $(O)
	kwalify -lf $(T)@!databaseSchema!@ $(DB) > $@.out
	@grep "$<#0: valid" $@.out >/dev/null \
	    || (cat $@.out && rm -f $@ && false) \
	    && (mv $@.out $@)

# chain also to the "validate" target which is used by the main-makefile
# to validate the template itself
validate:: $(O)database.verified
# attach to the "clean temporary state" rule:
clean_state::
	rm -f $(O)database.verified

<!--(else)-->
# no schema provided, no validation possible
<!--(end)-->

#
# now all the templates given in the config file
#

<!--(for templ in templates)-->
# output rule for $(O)@!templ["outFilename"]!@
$(O)@!templ["outFilename"]!@ @!default("templ['name']","")!@: $(T)@!templ["templateFilename"]!@ $(DB) $(O)Makefile.inc | $(O)
	@mkdir --parent $(dir $(O)@!templ["outFilename"]!@)
	$(PYRATEMP)  -f $(DB) <!--(if default("templ['extraVariable']"))-->-d @!templ["extraVariable"]!@ <!--(end)--> $< > $(O)@!templ["outFilename"]!@ || (rm $(O)@!templ["outFilename"]!@ && false)

# attach ourself to the "generate" meta target
generate_template:: $(O)@!templ["outFilename"]!@
# add generated file to clean target
clean_template::
	rm -f $(O)@!templ["outFilename"]!@

<!--(end)-->

<!--(if exists("copies"))-->
    <!--(for c in copies)-->
$(O)@!c["outFilename"]!@ @!default("c['name']","")!@: $(T)@!c["originalFilename"]!@ $(DB) $(O)Makefile.inc | $(O)
	cp $< $@

generate_template:: $(O)@!c["outFilename"]!@
clean_template::
	rm -f $(O)@!c["outFilename"]!@

    <!--(end)-->
<!--(end)-->

# printing info
info::
	@echo "info: generated '$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))'"
